package com.example.verifonevx990app.digiPOS

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Base64
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.example.verifonevx990app.R
import com.example.verifonevx990app.databinding.FragmentQrTestBinding
import com.example.verifonevx990app.databinding.FragmentUpiEnterDetailBinding
import java.io.ByteArrayOutputStream


class QrTestFragment : Fragment() {
  var binding:FragmentQrTestBinding?=null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        binding = FragmentQrTestBinding.inflate(layoutInflater, container, false)
        return binding?.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding?.btnShowQr?.setOnClickListener {

            val base64String="89504E470D0A1A0A0000000D49484452000000D200000094080200000069FAE064000005A54944415478DAEDDC5B7223390C4451EF7FD3330B98680590C9928B3D075F0AB9C47AF0CA492440FDFC23C4D7E3C72310B013B0130276027642C04EC04E08D809D809013B013B013B21FE6EEC7EC6311FEDF3EBC9A7FE74F6CF47FEF7FD3FDDE9E7773E5FF3E771FA67083BD8C1EE49EC1A98B678CDC1CAAE7332E59FCF38B9C7F95DCF8F811DEC60F72DECE628CCE5AF11DC0C8BED67B77F6DA41F76B083DD3DD8CD17F2D9427BBE90FFE65D6C5FC30E76B0FBBB4476BE646E528D2DBE73A033E8E7A20F3BD8C1EE7E03255BF89FB27933B3636EDE4EAEB67986B0831DEC7E0FBBAD8479AD38063BD8DD865D0FEBDC52DEDA227391CD92A1C6CAB978EE60073B223BB224B69371CA4AD88AD7D9F36EC77FA775023BD8C12E6D66EC652B5B863745B67E9CC63C821DEC60F726919D3CB8AC313343393B636603650B8FF9BDC30E76B07B93D46EE5A91F6782CE56ACE777DAB7D767D70C3BD8C1EE7D26F0B6189FC1717662B66DF7FD17EC96C40276B09352A42DE67D13D476E4F931598AD38FF34E79851DEC609796CF331CB3C27F66209FB2877A1925B2B083DDFB9289BEACD494E77B33A241AAF9DA7C3361821DEC607742642753D24852D356D917E21AFB7AFB45D5D40E3BD8BD5B64B7D270AA257D8E7B66FCF6A2CF40811DECEE17D9CFA2903DD0E60725B6F86E5384E7D28E46E261073BD8FD0676D9C47F9ED4AC8C9695C8B649439FE230506007BB1B528AB3686ED385278C92ED3B5B716C5AC260073BD8DD005C2F73DBE9C9EC95E68BB115D96C1CD8C10E76BF07D644449A7253267C5B20B606CA16ACAC098AC8C20E76EFC0EE6C617B8BD47651DFC87DBF61317B86B0831DECDE2AB2BD95FAC4E23A335632A3BB31871928B083DD0DD865623A6F4F6A5A04CE16A33271CC363E32506007BBDB0C9479D27056701B8CBEB361710B2BEC6007BB77D828F3F42213A349A3C05CD44E992FDF4C5F60073BD8BDCF3ADEDAAA4F948F4E251FA792836D530291851DECDE87DD5C629A92D456B0B6DB881A2BE4542AC640811DECDE9A52CC852603A241B317BE6DE3D359139BC8C20E763760D71B255B93F9B98DD0A70C94ED5F61073BD8BDCF3AC904AB693AEF538D669B7766A930506007BBFB45762E0AA79A1CFB23CF42963D198D4FB083DD3D76F156E032689A36D2EDFBD9023F33506C58841DEC6EC32E13946C79DED82E996467064A5F2A841DEC60770F647D992813EB53A2D6A71D4D832AEC6007BB77DBC5BDE5D1580F4F9B14BD81D20834EC6007BB77C0D72CEAB3057B56E6CA1AB41828B083DDFF0FBBEDF4F7923A1933DB1C9EC974D398697B36EC6077337673D1D9027436DD99E395D9BF5BFB8681023BD8DD805D6F88F4E5B2A6849F096206CAF65C0C14D8C1EE869FDED9367266F29719B6D9C6C13EEDC8D211220B3BD8BD0FB8B9A9D13FFA6C63E229AC7B03657B16D8C10E76EF86AFFF2986AD64CF2D8C27362CF65BCA1928B083DD3D064A23B55BAB652EA65911AC31509A2D8C0C14D8C1EE8694A2374A1A141A93799B2E348DECDB1160073BD8DD66A3CCA5AA17ACA6E1BE4F9E26E9CEFB851576B083DD7EE19F6D316C842F83204B0E32E3776EFDC00E76B07BE1BFE265013E6B26C8EC95F908A79607BD11033BD8C1EE7DA8F58BEB263599DB34D94F61649675561E7C6792013BD8B18BF726C8A9F6CFAD403F6DA064C2ADCD1376B0BB0DBB53CD98CD3467A06C453C4B71CE820B3BD8C1EE0663658B4236E6D6929D5F43D31C9A253AB0831DECDE6A9A6CCD826DEA90B5206C4B6ADB2F4623A04F6C08821DEC60775A34B7C734ADF05B03254B1DFA6B9E8B2F91851DECEEC1AE374EB3A253BF0C988BEC16D953961091851DECEEC42E9BE02CD5C884B537504E2561B0831DECEE17D96C83745332EF371ACE3F9B8DD3000D3BD8C1EE4D06CA56869EBE86BE81BE4F084E893EEC6007BBE7B16BDA93BEB90DF1335EBD819249F9FCD9C20E76B0130276027642C04EC04E08D809D809013B013B013B216027602704ECC4FDF12FD8261133609B1D8D0000000049454E44AE426082"
                /*     val imageBytes = Base64.decode(base64String, Base64.DEFAULT)
            val decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)
            binding?.qrImg?.setImageBitmap(decodedImage)*/
val ii=Base64Util.convertStringToBitmap(base64String)
            binding?.qrImg?.setImageBitmap(ii)
          /*  val byteArrayOutputStream = ByteArrayOutputStream()
            val bitmap = BitmapFactory.decodeResource(resources, R.drawable.image)
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)
            var imageBytes: ByteArray = byteArrayOutputStream.toByteArray()
            val imageString: String = Base64.encodeToString(imageBytes, Base64.DEFAULT)
            imageBytes = Base64.decode(imageString, Base64.DEFAULT)
            val decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)
            binding?.qrImg?.setImageBitmap(decodedImage)*/

        }
    }

}